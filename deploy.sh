#!/bin/bash

# Resume Builder Deployment Script
# This script helps deploy the application using Docker and Docker Compose

set -e  # Exit on any error

echo "üöÄ Resume Builder Deployment Script"
echo "=================================="

# Function to check if Docker is installed
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker is not installed. Please install Docker first."
        echo "Visit: https://docs.docker.com/get-docker/"
        exit 1
    fi
    echo "‚úÖ Docker is installed"
}

# Function to check if Docker Compose is installed
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo "‚ùå Docker Compose is not installed. Please install Docker Compose first."
        echo "Visit: https://docs.docker.com/compose/install/"
        exit 1
    fi
    echo "‚úÖ Docker Compose is available"
}

# Function to create necessary directories
create_directories() {
    echo "üìÅ Creating necessary directories..."
    mkdir -p uploads
    mkdir -p ssl
    echo "‚úÖ Directories created"
}

# Function to build and start services
deploy() {
    echo "üèóÔ∏è  Building and starting services..."

    # Stop any existing containers
    echo "üõë Stopping existing containers..."
    docker-compose down --remove-orphans || true

    # Build and start services
    echo "üî® Building images..."
    docker-compose build --no-cache

    echo "üöÄ Starting services..."
    docker-compose up -d

    echo "‚è≥ Waiting for services to be ready..."
    sleep 30

    # Check service health
    echo "üîç Checking service health..."
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        echo "‚úÖ Backend is healthy"
    else
        echo "‚ùå Backend health check failed"
        docker-compose logs backend
        exit 1
    fi

    if curl -f http://localhost:3000 > /dev/null 2>&1; then
        echo "‚úÖ Frontend is responding"
    else
        echo "‚ùå Frontend health check failed"
        docker-compose logs frontend
        exit 1
    fi

    if curl -f http://localhost > /dev/null 2>&1; then
        echo "‚úÖ Nginx is running"
    else
        echo "‚ùå Nginx health check failed"
        docker-compose logs nginx
        exit 1
    fi
}

# Function to show deployment info
show_info() {
    echo ""
    echo "üéâ Deployment successful!"
    echo "========================"
    echo "üì± Application URLs:"
    echo "   ‚Ä¢ Main Application: http://localhost"
    echo "   ‚Ä¢ Frontend (direct): http://localhost:3000"
    echo "   ‚Ä¢ Backend API: http://localhost/api"
    echo "   ‚Ä¢ Backend (direct): http://localhost:8000"
    echo "   ‚Ä¢ API Documentation: http://localhost:8000/docs"
    echo "   ‚Ä¢ Health Check: http://localhost:8000/health"
    echo ""
    echo "üê≥ Docker Commands:"
    echo "   ‚Ä¢ View logs: docker-compose logs -f [service_name]"
    echo "   ‚Ä¢ Stop services: docker-compose down"
    echo "   ‚Ä¢ Restart services: docker-compose restart"
    echo "   ‚Ä¢ View status: docker-compose ps"
    echo ""
    echo "üìä Monitoring:"
    echo "   ‚Ä¢ View all logs: docker-compose logs -f"
    echo "   ‚Ä¢ View backend logs: docker-compose logs -f backend"
    echo "   ‚Ä¢ View frontend logs: docker-compose logs -f frontend"
    echo "   ‚Ä¢ View nginx logs: docker-compose logs -f nginx"
}

# Main execution
main() {
    check_docker
    check_docker_compose
    create_directories
    deploy
    show_info
}

# Handle script arguments
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "stop")
        echo "üõë Stopping all services..."
        docker-compose down
        echo "‚úÖ All services stopped"
        ;;
    "restart")
        echo "üîÑ Restarting services..."
        docker-compose restart
        echo "‚úÖ Services restarted"
        ;;
    "logs")
        docker-compose logs -f "${2:-}"
        ;;
    "status")
        docker-compose ps
        ;;
    "clean")
        echo "üßπ Cleaning up Docker resources..."
        docker-compose down --volumes --remove-orphans
        docker system prune -f
        echo "‚úÖ Cleanup completed"
        ;;
    *)
        echo "Usage: $0 {deploy|stop|restart|logs|status|clean}"
        echo ""
        echo "Commands:"
        echo "  deploy  - Deploy the application (default)"
        echo "  stop    - Stop all services"
        echo "  restart - Restart all services"
        echo "  logs    - View logs (optional: specify service name)"
        echo "  status  - Show service status"
        echo "  clean   - Stop services and clean up Docker resources"
        exit 1
        ;;
esac