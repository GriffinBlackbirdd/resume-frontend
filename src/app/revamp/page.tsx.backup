"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { cn } from "@/lib/utils";
import Stepper, { Step } from "@/components/ui/stepper";
import AnalysisLoadingScreen from "@/components/AnalysisLoadingScreen";
import { useAuth } from "@/contexts/AuthContext";

interface FormData {
  location: string;
  email: string;
  phone: string;
  linkedin: string;
  github: string;
  jobRole: string;
  targetCompany: string;
  resumeFile: File | null;
  jobDescriptionFile: File | null;
  useJobDescriptionText: boolean;
  jobDescriptionText: string;
}

export default function RevampPage() {
  const router = useRouter();
  const { token } = useAuth(); // Get the authentication token
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    location: "",
    email: "",
    phone: "",
    linkedin: "",
    github: "",
    jobRole: "",
    targetCompany: "",
    resumeFile: null,
    jobDescriptionFile: null,
    useJobDescriptionText: false,
    jobDescriptionText: "",
  });

  const handleInputChange = (field: keyof FormData, value: string | boolean) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleFileChange = (field: keyof FormData, file: File | null) => {
    setFormData(prev => ({
      ...prev,
      [field]: file
    }));
  };

  const handleComplete = async () => {
    setIsAnalyzing(true);

    try {
      // Prepare form data for API
      const apiFormData = new FormData();
      apiFormData.append('location', formData.location);
      apiFormData.append('email', formData.email);
      apiFormData.append('phone', formData.phone);
      apiFormData.append('linkedin', formData.linkedin);
      apiFormData.append('github', formData.github || '');
      apiFormData.append('jobRole', formData.jobRole);
      apiFormData.append('targetCompany', formData.targetCompany || '');

      if (formData.resumeFile) {
        apiFormData.append('resumeFile', formData.resumeFile);
      }

      // Handle job description - either file or text
      if (formData.useJobDescriptionText && formData.jobDescriptionText.trim()) {
        apiFormData.append('jobDescriptionText', formData.jobDescriptionText.trim());
      } else if (formData.jobDescriptionFile) {
        apiFormData.append('jobDescriptionFile', formData.jobDescriptionFile);
      }

      // Call the FastAPI endpoint
      const headers: HeadersInit = {
        'ngrok-skip-browser-warning': 'true'
      };

      // Add Authorization header if user is authenticated
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
        console.log('🔐 Adding Authorization header to request');
      } else {
        console.log('⚠️ No token found - request will be made without authentication');
      }

      const response = await fetch('http://localhost:8000/revamp-existing', {
        method: 'POST',
        headers,
        body: apiFormData,
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Analysis failed');
      }

      // Store YAML content, JD path, original resume path, and original ATS score in sessionStorage and redirect to editor
      sessionStorage.setItem('generatedYaml', result.yamlContent);
      if (result.jobDescriptionPath) {
        sessionStorage.setItem('jobDescriptionPath', result.jobDescriptionPath);
      }
      if (result.originalResumePath) {
        sessionStorage.setItem('originalResumePath', result.originalResumePath);
      }
      if (result.original_ats_score !== null && result.original_ats_score !== undefined) {
        sessionStorage.setItem('originalAtsScore', result.original_ats_score.toString());
        console.log('✅ Stored original ATS score in session:', result.original_ats_score);
      }
      router.push('/editor');

    } catch (error) {
      console.error('Error during analysis:', error);
      setIsAnalyzing(false);

      let errorMessage = 'Unknown error occurred';
      let troubleshooting = '';

      if (error instanceof Error) {
        errorMessage = error.message;
      }

      // If it's a service unavailable error, show helpful message
      if (errorMessage.includes('not available')) {
        troubleshooting = '\n\nTo fix this:\n1. Open a terminal in the project folder\n2. Run: python start_backend.py\n3. Wait for "Backend will be available" message\n4. Try your analysis again';
      }

      alert(`Analysis failed: ${errorMessage}${troubleshooting}`);
    }
  };

  const validateStep = (step: number) => {
    switch (step) {
      case 1:
        return formData.email && formData.phone && formData.linkedin;
      case 2:
        const hasJobDescription = formData.useJobDescriptionText
          ? formData.jobDescriptionText.trim().length > 0
          : formData.jobDescriptionFile !== null;
        return formData.jobRole && formData.resumeFile && hasJobDescription;
      case 3:
        return true; // Review step is always valid
      default:
        return true;
    }
  };

  return (
    <div className="h-screen bg-black text-white flex flex-col">
      <AnalysisLoadingScreen isVisible={isAnalyzing} />

      {/* Compact Header Bar */}
      <div className="flex items-center justify-between px-6 py-3 border-b border-zinc-800/50 bg-zinc-900/20 backdrop-blur-sm">
        <div className="flex items-center space-x-4">
          <button
            onClick={() => router.back()}
            className="flex items-center text-zinc-400 hover:text-white transition-colors"
          >
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
            Back
          </button>
          <div>
            <h1 className="text-lg font-bold text-white">
              Revamp Your Resume
            </h1>
            <p className="text-xs text-zinc-400">
              Transform your resume to match your target job
            </p>
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 overflow-hidden">
        {/* Stepper */}
        <Stepper
          onFinalStepCompleted={handleComplete}
          onStepChange={(step) => {
            // Handle step change if needed
          }}
          validateStep={validateStep}
        >
          {/* Step 1: Personal Information */}
          <Step>
            <div className="h-full flex flex-col px-2 py-4">
              {/* Header */}
              <div className="flex items-center mb-4 px-6">
                <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-xl border border-blue-500/20 mr-6">
                  <svg className="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                </div>
                <div>
                  <h2 className="text-xl font-bold text-white">Personal Information</h2>
                  <p className="text-sm text-zinc-400">Tell us about yourself to get started</p>
                </div>
              </div>

              {/* Full Width Layout */}
              <div className="flex-1 overflow-y-auto px-8">
                <div className="max-w-7xl mx-auto">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-10">
                    {/* Contact Information Section */}
                    <div className="bg-zinc-900/40 backdrop-blur-sm rounded-2xl border border-zinc-800/50 p-8">
                      <div className="flex items-center mb-8">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mr-3"></div>
                        <h3 className="text-lg font-semibold text-white">Contact Information</h3>
                      </div>

                      <div className="space-y-6">
                    {/* Location */}
                    <div className="group">
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                          <svg className="h-5 w-5 text-zinc-400 group-focus-within:text-blue-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                          </svg>
                        </div>
                        <input
                          type="text"
                          id="location"
                          value={formData.location}
                          onChange={(e) => handleInputChange("location", e.target.value)}
                          className="w-full pl-12 pr-4 py-4 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/20 transition-all duration-200 hover:border-zinc-600/50"
                          placeholder="Enter your location"
                        />
                        <label htmlFor="location" className="absolute -top-2.5 left-3 px-2 bg-zinc-900 text-xs font-medium text-zinc-400 group-focus-within:text-blue-400 transition-colors">
                          Location
                        </label>
                      </div>
                    </div>

                    {/* Email */}
                    <div className="group">
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                          <svg className="h-5 w-5 text-zinc-400 group-focus-within:text-blue-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                          </svg>
                        </div>
                        <input
                          type="email"
                          id="email"
                          value={formData.email}
                          onChange={(e) => handleInputChange("email", e.target.value)}
                          className="w-full pl-12 pr-4 py-4 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/20 transition-all duration-200 hover:border-zinc-600/50"
                          placeholder="john.doe@example.com"
                          required
                        />
                        <label htmlFor="email" className="absolute -top-2.5 left-3 px-2 bg-zinc-900 text-xs font-medium text-red-400 group-focus-within:text-blue-400 transition-colors">
                          Email Address *
                        </label>
                      </div>
                    </div>

                    {/* Phone */}
                    <div className="group">
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                          <svg className="h-5 w-5 text-zinc-400 group-focus-within:text-blue-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                          </svg>
                        </div>
                        <input
                          type="tel"
                          id="phone"
                          value={formData.phone}
                          onChange={(e) => handleInputChange("phone", e.target.value)}
                          className="w-full pl-12 pr-4 py-4 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/20 transition-all duration-200 hover:border-zinc-600/50"
                          placeholder="+1 (555) 123-4567"
                          required
                        />
                        <label htmlFor="phone" className="absolute -top-2.5 left-3 px-2 bg-zinc-900 text-xs font-medium text-red-400 group-focus-within:text-blue-400 transition-colors">
                          Phone Number *
                        </label>
                      </div>
                    </div>

                    {/* LinkedIn */}
                    <div className="group">
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                          <svg className="h-5 w-5 text-zinc-400 group-focus-within:text-blue-400 transition-colors" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                          </svg>
                        </div>
                        <input
                          type="url"
                          id="linkedin"
                          value={formData.linkedin}
                          onChange={(e) => handleInputChange("linkedin", e.target.value)}
                          className="w-full pl-12 pr-4 py-4 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/20 transition-all duration-200 hover:border-zinc-600/50"
                          placeholder="https://linkedin.com/in/johndoe"
                          required
                        />
                        <label htmlFor="linkedin" className="absolute -top-2.5 left-3 px-2 bg-zinc-900 text-xs font-medium text-red-400 group-focus-within:text-blue-400 transition-colors">
                          LinkedIn Profile *
                        </label>
                      </div>
                    </div>
                  </div>
                    </div>

                    {/* Professional Links Section */}
                    <div className="bg-zinc-900/40 backdrop-blur-sm rounded-2xl border border-zinc-800/50 p-8">
                      <div className="flex items-center mb-8">
                        <div className="w-2 h-2 bg-purple-500 rounded-full mr-3"></div>
                        <h3 className="text-lg font-semibold text-white">Professional Links</h3>
                        <span className="ml-3 text-xs text-zinc-500 bg-zinc-800 px-2 py-1 rounded-full">Optional</span>
                      </div>

                      <div className="group">
                        <div className="relative">
                          <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                            <svg className="h-5 w-5 text-zinc-400 group-focus-within:text-purple-400 transition-colors" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                            </svg>
                          </div>
                          <input
                            type="url"
                            id="github"
                            value={formData.github}
                            onChange={(e) => handleInputChange("github", e.target.value)}
                            className="w-full pl-12 pr-4 py-4 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-purple-500/50 focus:ring-2 focus:ring-purple-500/20 transition-all duration-200 hover:border-zinc-600/50"
                            placeholder="https://github.com/johndoe"
                          />
                          <label htmlFor="github" className="absolute -top-2.5 left-3 px-2 bg-zinc-900 text-xs font-medium text-zinc-400 group-focus-within:text-purple-400 transition-colors">
                            GitHub Profile
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Step>

          {/* Step 2: File Uploads */}
          <Step>
            <div className="h-full flex flex-col px-2 py-4">
              {/* Header */}
              <div className="flex items-center mb-4 px-6">
                <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-br from-green-500/20 to-blue-500/20 rounded-xl border border-green-500/20 mr-6">
                  <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6" />
                  </svg>
                </div>
                <div>
                  <h2 className="text-xl font-bold text-white">Job Details & Files</h2>
                  <p className="text-sm text-zinc-400">Provide job information and upload your files for analysis</p>
                </div>
              </div>

              {/* Full Width Layout */}
              <div className="flex-1 overflow-y-auto px-8">
                <div className="max-w-7xl mx-auto">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-10">
                    {/* Job Information Section */}
                    <div className="bg-zinc-900/40 backdrop-blur-sm rounded-2xl border border-zinc-800/50 p-8">
                      <div className="flex items-center mb-8">
                        <div className="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
                        <h3 className="text-lg font-semibold text-white">Job Information</h3>
                      </div>

                      <div className="space-y-6">
                    {/* Job Role */}
                    <div className="group">
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                          <svg className="h-5 w-5 text-zinc-400 group-focus-within:text-green-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6" />
                          </svg>
                        </div>
                        <input
                          type="text"
                          id="jobRole"
                          value={formData.jobRole}
                          onChange={(e) => handleInputChange("jobRole", e.target.value)}
                          className="w-full pl-12 pr-4 py-4 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-green-500/50 focus:ring-2 focus:ring-green-500/20 transition-all duration-200 hover:border-zinc-600/50"
                          placeholder="AI Engineer, Full Stack Developer, Product Manager"
                          required
                        />
                        <label htmlFor="jobRole" className="absolute -top-2.5 left-3 px-2 bg-zinc-900 text-xs font-medium text-red-400 group-focus-within:text-green-400 transition-colors">
                          Target Job Role *
                        </label>
                      </div>
                      <p className="text-xs text-zinc-500 mt-2 ml-1">Enter the exact job title you're applying for</p>
                    </div>

                    {/* Target Company */}
                    <div className="group">
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                          <svg className="h-5 w-5 text-zinc-400 group-focus-within:text-green-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                          </svg>
                        </div>
                        <input
                          type="text"
                          id="targetCompany"
                          value={formData.targetCompany}
                          onChange={(e) => handleInputChange("targetCompany", e.target.value)}
                          className="w-full pl-12 pr-4 py-4 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-green-500/50 focus:ring-2 focus:ring-green-500/20 transition-all duration-200 hover:border-zinc-600/50"
                          placeholder="Google, Microsoft, OpenAI, Tesla"
                        />
                        <label htmlFor="targetCompany" className="absolute -top-2.5 left-3 px-2 bg-zinc-900 text-xs font-medium text-zinc-400 group-focus-within:text-green-400 transition-colors">
                          Target Company
                        </label>
                        <span className="absolute -top-2.5 right-3 px-2 bg-zinc-900 text-xs text-zinc-500">Optional</span>
                      </div>
                      <p className="text-xs text-zinc-500 mt-2 ml-1">Company name you're targeting for this role</p>
                      </div>
                    </div>

                    {/* File Uploads Section */}
                    <div className="bg-zinc-900/40 backdrop-blur-sm rounded-2xl border border-zinc-800/50 p-8">
                      <div className="flex items-center mb-8">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mr-3"></div>
                        <h3 className="text-lg font-semibold text-white">Upload Files</h3>
                      </div>

                      <div className="space-y-8">
                    {/* Resume Upload */}
                    <div>
                      <label className="block text-sm font-medium text-white mb-4 flex items-center">
                        <svg className="w-4 h-4 mr-2 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Current Resume *
                      </label>
                      <div className="relative group">
                        <input
                          id="resume-upload"
                          type="file"
                          className="sr-only"
                          accept=".pdf"
                          onChange={(e) => {
                            const file = e.target.files?.[0] || null;
                            handleFileChange("resumeFile", file);
                          }}
                        />
                        <label
                          htmlFor="resume-upload"
                          className={cn(
                            "flex flex-col items-center justify-center w-full h-40 border-2 border-dashed rounded-2xl cursor-pointer transition-all duration-300 group-hover:scale-[1.02]",
                            formData.resumeFile
                              ? "border-green-500/50 bg-green-500/5 hover:bg-green-500/10"
                              : "border-zinc-600/50 hover:border-blue-500/50 bg-zinc-800/30 hover:bg-zinc-800/50"
                          )}
                        >
                          <div className="flex flex-col items-center justify-center pt-5 pb-6">
                            {formData.resumeFile ? (
                              <>
                                <div className="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mb-3">
                                  <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  </svg>
                                </div>
                                <p className="text-green-400 font-semibold mb-1">{formData.resumeFile.name}</p>
                                <p className="text-xs text-zinc-400">Click to change file</p>
                              </>
                            ) : (
                              <>
                                <div className="w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center mb-3">
                                  <svg className="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                  </svg>
                                </div>
                                <p className="text-white font-medium mb-1">Upload your current resume</p>
                                <p className="text-xs text-zinc-400">PDF format only • Max 10MB</p>
                              </>
                            )}
                          </div>
                        </label>
                      </div>
                    </div>

                    {/* Job Description Upload */}
                    <div>
                      <label className="block text-sm font-medium text-white mb-4 flex items-center">
                        <svg className="w-4 h-4 mr-2 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Job Description *
                      </label>

                      {/* Toggle Switch */}
                      <div className="mb-6">
                        <div className="bg-zinc-800/50 rounded-xl p-4 border border-zinc-700/50">
                          <label className="flex items-center space-x-4 cursor-pointer group">
                            <div className="relative">
                              <input
                                type="checkbox"
                                checked={formData.useJobDescriptionText}
                                onChange={(e) => {
                                  handleInputChange("useJobDescriptionText", e.target.checked);
                                  if (e.target.checked) {
                                    handleFileChange("jobDescriptionFile", null);
                                  } else {
                                    handleInputChange("jobDescriptionText", "");
                                  }
                                }}
                                className="sr-only"
                              />
                              <div className={cn(
                                "w-12 h-6 rounded-full transition-all duration-200",
                                formData.useJobDescriptionText ? "bg-blue-500" : "bg-zinc-600"
                              )}>
                                <div className={cn(
                                  "w-5 h-5 rounded-full bg-white shadow-lg transform transition-transform duration-200 mt-0.5",
                                  formData.useJobDescriptionText ? "translate-x-6" : "translate-x-0.5"
                                )} />
                              </div>
                            </div>
                            <div className="flex items-center space-x-2">
                              <svg className="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                              </svg>
                              <span className="text-white font-medium">Paste job description as text</span>
                            </div>
                          </label>
                        </div>
                      </div>

                      {/* Conditional Content */}
                      {formData.useJobDescriptionText ? (
                        <div className="group">
                          <div className="relative">
                            <textarea
                              value={formData.jobDescriptionText}
                              onChange={(e) => handleInputChange("jobDescriptionText", e.target.value)}
                              placeholder="Paste the complete job description here..."
                              rows={6}
                              className="w-full px-4 py-3 bg-zinc-800/40 border border-zinc-700/50 rounded-xl text-white placeholder-zinc-500 focus:outline-none focus:border-blue-500/50 focus:ring-2 focus:ring-blue-500/20 transition-all duration-200 resize-vertical min-h-[120px] hover:border-zinc-600/50"
                            />
                            <div className="absolute top-3 right-3">
                              <div className="flex items-center space-x-2">
                                <span className="text-xs text-zinc-500 bg-zinc-800 px-2 py-1 rounded">
                                  {formData.jobDescriptionText.length} chars
                                </span>
                              </div>
                            </div>
                          </div>
                          <p className="text-xs text-zinc-500 mt-2 ml-1">Paste the complete job description text for better analysis</p>
                        </div>
                      ) : (
                        <div className="group">
                          <input
                            id="job-description-upload"
                            type="file"
                            className="sr-only"
                            accept=".pdf,.docx,.txt"
                            onChange={(e) => {
                              const file = e.target.files?.[0] || null;
                              handleFileChange("jobDescriptionFile", file);
                            }}
                          />
                          <label
                            htmlFor="job-description-upload"
                            className={cn(
                              "flex flex-col items-center justify-center w-full h-40 border-2 border-dashed rounded-2xl cursor-pointer transition-all duration-300 group-hover:scale-[1.02]",
                              formData.jobDescriptionFile
                                ? "border-green-500/50 bg-green-500/5 hover:bg-green-500/10"
                                : "border-zinc-600/50 hover:border-blue-500/50 bg-zinc-800/30 hover:bg-zinc-800/50"
                            )}
                          >
                            <div className="flex flex-col items-center justify-center pt-5 pb-6">
                              {formData.jobDescriptionFile ? (
                                <>
                                  <div className="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mb-3">
                                    <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                  </div>
                                  <p className="text-green-400 font-semibold mb-1">{formData.jobDescriptionFile.name}</p>
                                  <p className="text-xs text-zinc-400">Click to change file</p>
                                </>
                              ) : (
                                <>
                                  <div className="w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center mb-3">
                                    <svg className="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                  </div>
                                  <p className="text-white font-medium mb-1">Upload job description file</p>
                                  <p className="text-xs text-zinc-400">PDF, DOCX, or TXT • Max 10MB</p>
                                </>
                              )}
                            </div>
                          </label>
                        </div>
                      )}
                    </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Step>

          {/* Step 3: Review */}
          <Step>
            <div className="h-full flex flex-col px-2 py-4">
              {/* Header */}
              <div className="flex items-center mb-4 px-6">
                <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-br from-emerald-500/20 to-blue-500/20 rounded-xl border border-emerald-500/20 mr-6">
                  <svg className="w-6 h-6 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div>
                  <h2 className="text-xl font-bold text-white">Review & Submit</h2>
                  <p className="text-sm text-zinc-400">Please review your information before proceeding with the analysis</p>
                </div>
              </div>

              {/* Full Width Layout */}
              <div className="flex-1 overflow-y-auto px-8">
                <div className="max-w-7xl mx-auto">
                  <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
                    {/* Personal Information Summary */}
                    <div className="bg-zinc-900/40 backdrop-blur-sm rounded-2xl border border-zinc-800/50 p-8">
                      <div className="flex items-center mb-8">
                    <div className="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center mr-3">
                      <svg className="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                    <h3 className="text-lg font-semibold text-white">Personal Information</h3>
                    <div className="ml-auto">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-500/10 text-green-400 border border-green-500/20">
                        <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        Complete
                      </span>
                    </div>
                  </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {formData.location && (
                      <div className="flex flex-col p-3 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                        <span className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-1">Location</span>
                        <span className="text-white font-medium">{formData.location}</span>
                      </div>
                    )}
                    <div className="flex flex-col p-3 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                      <span className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-1">Email</span>
                      <span className="text-white font-medium break-all">{formData.email}</span>
                    </div>
                    <div className="flex flex-col p-3 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                      <span className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-1">Phone</span>
                      <span className="text-white font-medium">{formData.phone}</span>
                    </div>
                    <div className="flex flex-col p-3 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                      <span className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-1">LinkedIn</span>
                      <span className="text-blue-400 text-sm break-all hover:underline cursor-pointer">{formData.linkedin}</span>
                    </div>
                    {formData.github && (
                      <div className="flex flex-col p-3 bg-zinc-800/30 rounded-lg border border-zinc-700/30 md:col-span-2">
                        <span className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-1">GitHub</span>
                        <span className="text-purple-400 text-sm break-all hover:underline cursor-pointer">{formData.github}</span>
                      </div>
                    )}
                  </div>
                    </div>

                    {/* Job Details Summary */}
                    <div className="bg-zinc-900/40 backdrop-blur-sm rounded-2xl border border-zinc-800/50 p-8">
                      <div className="flex items-center mb-8">
                    <div className="w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center mr-3">
                      <svg className="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6" />
                      </svg>
                    </div>
                    <h3 className="text-lg font-semibold text-white">Job Information</h3>
                    <div className="ml-auto">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-500/10 text-green-400 border border-green-500/20">
                        <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        Complete
                      </span>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 gap-4">
                    <div className="flex flex-col p-4 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                      <span className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-2">Target Job Role</span>
                      <span className="text-white font-semibold text-lg">{formData.jobRole}</span>
                    </div>
                    {formData.targetCompany && (
                      <div className="flex flex-col p-4 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                        <span className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-2">Target Company</span>
                        <span className="text-white font-semibold text-lg">{formData.targetCompany}</span>
                      </div>
                    )}
                  </div>
                </div>

                    {/* Files Summary */}
                    <div className="bg-zinc-900/40 backdrop-blur-sm rounded-2xl border border-zinc-800/50 p-8">
                      <div className="flex items-center mb-8">
                    <div className="w-8 h-8 bg-purple-500/20 rounded-full flex items-center justify-center mr-3">
                      <svg className="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                    </div>
                    <h3 className="text-lg font-semibold text-white">Uploaded Files</h3>
                    <div className="ml-auto">
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-500/10 text-green-400 border border-green-500/20">
                        <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        Ready
                      </span>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {/* Resume File */}
                    <div className="flex items-center p-4 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                      <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center mr-4">
                        <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-1">Current Resume</p>
                        <p className="text-white font-medium truncate">{formData.resumeFile?.name}</p>
                      </div>
                      <div className="ml-4">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-500/10 text-green-400">
                          <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                          PDF
                        </span>
                      </div>
                    </div>

                    {/* Job Description */}
                    <div className="flex items-center p-4 bg-zinc-800/30 rounded-lg border border-zinc-700/30">
                      <div className="w-10 h-10 bg-purple-500/20 rounded-lg flex items-center justify-center mr-4">
                        <svg className="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          {formData.useJobDescriptionText ? (
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                          ) : (
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          )}
                        </svg>
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-zinc-400 text-xs font-medium uppercase tracking-wide mb-1">Job Description</p>
                        <p className="text-white font-medium truncate">
                          {formData.useJobDescriptionText
                            ? `Text Content (${formData.jobDescriptionText.length} characters)`
                            : formData.jobDescriptionFile?.name
                          }
                        </p>
                      </div>
                      <div className="ml-4">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-500/10 text-green-400">
                          <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                          {formData.useJobDescriptionText ? 'TEXT' : 'FILE'}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                    {/* Ready to Analyze Card */}
                    <div className="xl:col-span-2 bg-gradient-to-r from-emerald-500/10 via-blue-500/10 to-purple-500/10 border border-emerald-500/20 rounded-2xl p-8 text-center mt-6">
                  <div className="inline-flex items-center justify-center w-12 h-12 bg-emerald-500/20 rounded-full mb-4">
                    <svg className="w-6 h-6 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold text-white mb-2">Ready for AI Analysis</h3>
                  <p className="text-zinc-300 mb-4">
                    Your resume will be analyzed and optimized to perfectly match the job requirements using advanced AI technology.
                  </p>
                  <div className="flex items-center justify-center space-x-6 text-sm text-zinc-400">
                    <div className="flex items-center">
                      <svg className="w-4 h-4 mr-1.5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      ATS Optimization
                    </div>
                    <div className="flex items-center">
                      <svg className="w-4 h-4 mr-1.5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Keyword Matching
                    </div>
                    <div className="flex items-center">
                      <svg className="w-4 h-4 mr-1.5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Content Enhancement
                    </div>
                  </div>
                </div>
                  </div>
                </div>
              </div>
            </div>
          </Step>
        </Stepper>
      </div>
    </div>
  );
}